class Dsu:
        def __init__(self, size):
            self.parent = list(range(size))
            self.size = [1 for _ in range(size)]
    
        def find(self, x):
            rt = x
            while rt != self.parent[rt]:
                rt = self.parent[rt]
            while x != rt:            
                nxt = self.parent[x]
                self.parent[x] = rt
                x = nxt
            return rt
    
        def union(self, x, y):
            px = self.find(x)
            py = self.find(y)
            if px != py:            
                if self.size[px] > self.size[py]:
                    px, py = py, px
                self.parent[px] = py
                self.size[py] += self.size[px]
    
        def connected(self, x, y):
            return self.find(x) == self.find(y)

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        initial.sort()
        dsu = Dsu(n)
        for i in range(n):
            for j in range(n):
                if graph[i][j]:
                    dsu.union(i, j)

        mp = defaultdict(list)
        for num in initial:
            root = dsu.find(num)
            mp[root].append(num)

        temp = []
        found = False
        for k, v in mp.items():
            if len(v) == 1:
                found = True
                temp.append(v[0])

        if not found:
            return initial[0]
        temp.sort(key=lambda x: (dsu.size[dsu.find(x)], -x))
        return temp[-1]
